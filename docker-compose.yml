version: "3.2"

volumes:
  staging_postgres_data: {}

services:
  postgres:
    container_name: postgres_db
    image: postgres:12
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=node_live_db
      - POSTGRES_USER=pgadmin
      - POSTGRES_PASSWORD=12345
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
    networks:
      - default
      - npm

  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    env_file:
      - ./deploy/.envs/.staging/.api
    networks:
      - default
      - npm

  app:
    image: "jc21/nginx-proxy-manager:latest"
    restart: unless-stopped
    container_name: npm
    ports:
      # These ports are in format <host-port>:<container-port>
      - "80:80" # Public HTTP Port
      - "443:443" # Public HTTPS Port
      - "83:81" # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      DB_MYSQL_HOST: "db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - db
    networks:
      - default
      - npm
  db:
    image: "jc21/mariadb-aria:latest"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "npm"
      MYSQL_DATABASE: "npm"
      MYSQL_USER: "npm"
      MYSQL_PASSWORD: "npm"
    volumes:
      - ./data/mysql:/var/lib/mysql
    networks:
      - npm
  web:
    image: nginx
    restart: always
    networks:
      - default
      - npm

networks:
  npm:
    driver: bridge
